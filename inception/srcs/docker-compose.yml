secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt
  wp_admin_password:
    file: ./secrets/wp_admin_password.txt
  wp_password:
    file: ./secrets/wp_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  ftp_password:
    file: ./secrets/ftp_password.txt

services:
  nginx:
    container_name: nginx
    init: true
    restart: always
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    depends_on:
      - wordpress
    networks:
      - docker-network
    ports:
      - 443:443
    volumes:
      - wordpress_data:/var/www/html:ro
      - portfolio_data:/var/www/portfolio:ro

  wordpress:
    container_name: wordpress
    init: true
    restart: always
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
    depends_on:
      - mariadb
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - WP_TITLE=${WP_TITLE}
      - WP_ADMIN_USER=${WP_ADMIN_USER}
      - WP_ADMIN_EMAIL=${WP_ADMIN_EMAIL}
      - WP_USER=${WP_USER}
      - WP_EMAIL=${WP_EMAIL}
    secrets:
      - mysql_password
      - wp_admin_password
      - wp_password
      - redis_password
    networks:
      - docker-network
    volumes:
      - wordpress_data:/var/www/html

  mariadb:
    container_name: mariadb
    init: true
    restart: always
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
    secrets:
      - mysql_root_password
      - mysql_password
    networks:
      - docker-network
    volumes:
       - mariadb_data:/var/lib/mysql

  redis:
    container_name: redis
    init: true
    restart: always
    build:
      context: ./requirements/redis
      dockerfile: Dockerfile
    secrets:
      - redis_password
    networks:
      - docker-network
    volumes:
      - redis_data:/data

  portfolio:
    container_name: portfolio
    build:
      context: ./requirements/portfolio
      dockerfile: Dockerfile
    volumes:
      - portfolio_data:/app/dist/

  ftp:
    container_name: ftp
    build:
      context: ./requirements/ftp
      dockerfile: Dockerfile
    depends_on:
      - wordpress
    secrets:
      - ftp_password
    environment:
      - FTP_USER=${FTP_USER}
    volumes:
      - wordpress_data:/home/${FTP_USER}
    ports:
      - 21:21
      - 20:20
      - 21100-21110:21100-21110

  adminer:
    container_name: adminer
    build:
      context: ./requirements/adminer
      dockerfile: Dockerfile
    depends_on:
      - mariadb
    networks:
      - docker-network
    ports:
      - 8080:8080

networks:
  docker-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./redis_data
  wordpress_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./wp_data
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./maria_data
  portfolio_data:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: ./portfolio_data
## Unnecessary to bind it to device,
## but subject may require it?
